const mapStateToProps = state => ({
    // calendarProp is the prop name passed into component
    // state is the root reducer 
    // calendar is a reducer in the root reducer
    // date is the key in the calender reducer
    calendarProp: state.calendar.date
  });
    
  const mapDispatchToProps = dispatch => ({
    // calendarProp is the prop name passed into component
    // setDate is the action creator function
    // dateObj is the action object payload value
    calendarProp: dateObj => dispatch(setDate(dateObj))
  });
  
  export default connect(mapStateToProps, mapDispatchToProps)(App);
  
///////////////////////////////////////////////////////////////////
ChangeNameButton.jsx

import React, {Component} from 'react';
import {connect} from "react-redux";

const action = {
    type: 'MODIFY_USERNAME',
    payload: 'new name',
};

class ChangeNameButton extends Component {
    render() {
        return (
            <input
                type="button"
                value="Change my name !"
                onClick={() => this.props.dispatch(action)}
                />
        );
    }
}

export default connect()(ChangeNameButton);

///////////////////////////////////////////////////////////////////
store.js:

import { createStore } from 'redux'

function userNameReducer(state = {username: 'initial name'}, action) {
    switch (action.type) {
        case 'MODIFY_USERNAME':
            return {username: action.payload}
        default:
            return state
    }
}

export default createStore(userNameReducer);

/////////////////////////////////////////////////////////////
  on a successful firebase save, call firebase GET to fetch new 
  updated data (implies extra call for api)
  which is fine since only one admin doing that
  
  /////////////////////////////////////////////////////////////
  export const selectCollection = memoize((collectionUrlParam) =>
  createSelector(
    [selectCollections],
    (collections) => collections[collectionUrlParam]
  )
);